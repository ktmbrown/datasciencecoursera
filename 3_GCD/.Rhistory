setwd("C:\\Users\\kbrown5\\Documents\\Data_Science\\Statistics")
# Read in csv
married_sal<-read.csv("family-households-with-married-couples.csv",header=T)
View(married_sal)
# Read in csv
married_sal<-read.csv("family-households-with-married-couples.csv",header=T)
# View the head
head(married_sal)
# View the structure
str(married_sal)
# Read in csv
married_sal<-read.csv("family-households-with-married-couples.csv",header=T)
# View the head
head(married_sal)
# Read in text file
married_sal2<-read.table("family-households-with-married-couples.txt",header=T)
# View the head
head(married_sal2)
# View the structure
str(married_sal2)
red_wine<-read.csv("winequality-red.csv", header=T, sep=';')
install.packages(readxl)
installed.packages()
install.packages('readx;')
install.packages('readxl')
library(readxl)
a <- array(rnorm(2*2*10), c(2,2,10))
a
apply(a,c(1,2), mean'')
apply(a,c(1,2), mean)
x <- matrix(rnorm(200),20,10)
x
apply(x,1,sum)
x[,1]
mean(x[,1])
sum(x[,])
sum(x[,1])
x
apply(x,1,sum)
apply(x,2,sum)
rowSums(x)
colSums(x)
x
apply(x,1,quantile,probs=c(0.25,0.75))
quantile(x[1,],probs=0.25)
x <- c(rnorm(10), runif(10), rnorm(10, 1))
f <- gl(3, 10)
f
split(x,f)
l1 <- split(x,f)
l1
l1$1
l1[1]
l1[2]
library(datasets)
data(iris)
?iris
head(iris)
factor(iris$Species)
tapply(iris,iris$Species,mean)
tapply(iris$Sepal.Length,iris$Species,mean)
iris(head)
head(iris)
colmeans(iris)
colMeans(iris)
colMeans(iris)
apply(iris[, 1:4], 2, mean)
class(apply(iris[, 1:4], 2, mean))
library(datasets)
data(mtcars)
head(mtcars)
tapply(mtcars$mpg,mtcars$cyl,mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
with(mtcars, tapply(mpg, cyl, mean))
apply(mtcars, 2, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
mean(mtcars$mpg, mtcars$cyl)
sapply(mtcars, cyl, mean)
split(mtcars, mtcars$cyl)
lapply(mtcars, mean)
head(mtcars)
tapply(mtcars$hp,mtcars$cyl,mean)
x <- tapply(mtcars$hp,mtcars$cyl,mean)
y <- x[1] - x[3]
debug(ls)
?ks
?ls
exit()
xmlfile <- xmlTreeParse(fileURL)
fileURL <- "http://www.w3schools.com/xml/plant_catalog.xml"
xmlfile <- XMLTreeParse(fileURL)
## xml practice
library(xml)
fileURL <- "http://www.w3schools.com/xml/plant_catalog.xml"
## xml practice
library(XML)
fileURL <- "http://www.w3schools.com/xml/plant_catalog.xml"
xmlfile <- XMLTreeParse(fileURL)
xmlfile <- xmlTreeParse(fileURL)
xmlfile <- xmlTreeParse(fileURL)
package.install('httr')
install.package('httr')
install.packages('httr')
library(httr)
fileURL <- "http://www.w3schools.com/xml/plant_catalog.xml"
xmlfile <- xmlTreeParse(rawToChar(GET(fileURL)$content))
class(xmlfile)
xmltop <- xmlRoot(xmlfile)
print(xmltop[1;2])
print(xmltop[1:2])
plantCategories <- xmlSApply(xmltop, function(x) xmlSApply(x, xmlValue))
plant_df <- data.frame(t(plantCategories), row.names = NULL)
View(plant_df)
getwd()
setwd("C:/Users/kbrown5/Documents/Data_Science/datasciencecoursera/3_GCD")
getwd()
file <- "records.xml"
xmlfile2 <- xmlTreeParse(file)
xmltop2 <- xmlRoot(xmlfile2)
records <- xmlSApply(xmltop, function(x) xmlSApply(x,xmlValue))
records_df <- data.frame(t(records), row.names = NULL)
View(records_df)
records <- xmlSApply(xmltop2, function(x) xmlSApply(x,xmlValue))
records_df <- data.frame(t(records), row.names = NULL)
View(xmltop2)
View(records_df)
file <- 'microdata_2006.csv'
md_df <- read.csv(file)
View(md_df)
md_df[,md_df$VAL]
head(md_df)
md_df$VAL
md_df[,md_df$VAL == 24]
md_df$VAL == 24
sum(md_df$VAL == 24)
sum(md_df$VAL == 24,na.rm = TRUE)
fileURL <- 'https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx'
download.file(fileURL, destfile = 'NGAP.xlsx', method='curl')
dateDownloaded <- date()
install.packages('xlsx')
library(xlsx)
dat <- read.xlsx('NGAP.xlsx', sheetIndex = 1, colIndex = colIndex, rowIndex = rowIndex)
colIndex <- 7:15
rowIndex <- 18:23
dat <- read.xlsx('NGAP.xlsx', sheetIndex = 1, colIndex = colIndex, rowIndex = rowIndex)
sum(dat$Zip*dat$Ext,na.rm=T)
, method='curl'
download.file(fileURL2, destfile = 'restaurants.xml', method='curl')
fileURL2 <- 'https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml'
download.file(fileURL2, destfile = 'restaurants.xml', method='curl')
file2 <- 'restaurants.xml'
fileURL3 <- 'https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml'
download.file(fileURL2, destfile = 'restaurants.xml', method='curl')
file3 <- 'restaurants.xml'
xmlfile3 <- xmlTreeParse(file3)
xmltop3 <- xmlRoot(xmlfile3)
restaurants <- xmlSApply(xmltop3, function(x) xmlSApply(x, xmlValue))
restaurants_df <- data.frame(t(restaurants), row.names = NULL)
View(restaurants_df)
restaurants <- xmlSApply(xmlfile3, function(x) xmlSApply(x, xmlValue))
download.file(fileURL, destfile = 'NGAP.xlsx', method='curl')
restaurants_df <- data.frame(t(restaurants), row.names = NULL)
View(restaurants_df)
print(head(xmlfile3))
xmltop3[[1]]
xmlfile3 <- xmlTreeParse(fileURL)
fileURL <- 'https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml'
xmlfile3 <- xmlTreeParse(fileURL)
doc <- xmlTreeParse(fileURL, useInternal = TRUE)
fileURL <- 'https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml'
doc <- xmlTreeParse(fileURL, useInternal = TRUE)
library(XML)
fileURL <- 'http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml'
doc <- xmlTreeParse(fileURL, useInternal = TRUE)
rootNode <- xmlRoot(doc)
xmlName(rootNode)
names(rootNode)
rootNode[[1]]
fileURL <- 'http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml'
doc <- xmlTreeParse(fileURL, useInternal = TRUE)
rootNode <- xmlRoot(doc)
xmlName(rootNode)
rootNode[[1]]
names(rootNode)
rootNode[[1]][[1]]
rootNode[[1]][[1]][[1]]
rootNode[[1]][[1]][[3]]
rootNode[[1]][[3]][[1]]
xmlSApply(rootNode,xmlValue)
xmlSApply(rootNode,"//name",xmlValue)
xpathSApply(rootNode,"//name",xmlValue)
xpathSApply(rootNode,"//zipcode",xmlValue)
rests<-xpathSApply(rootNode,"//zipcode",function(x) xmlSApply(x,xmlValue))
rest_df <- data.frame(t(rests),row.names = NULL)
View(rest_df)
rests<-xpathSApply(rootNode,function(x) xmlSApply(x,xmlValue))
rest_df <- data.frame(t(rests),row.names = NULL)
rNode <- xmlRoot(rootNode)
names(rNode)
restaurant_name <- xpathSApply(doc,"//name",xmlValue)
head(restaurant_name)
restaurant_zip <- xpathSApply(doc, '//zipcode', xmlValue)
rest_df <- cbind(restaurant_name, restaurant_zip)
View(rest_df)
source('~/.active-rstudio-document', echo=TRUE)
rest_df <- data.frame(cbind(restaurant_name, restaurant_zip))
View(rest_df)
class(rest_df)
rest_df$restaurant_zip == '21231'
sum(rest_df$restaurant_zip == '21231',na.rm = TRUE)
fileURL <- 'https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv'
download.file(fileURL, destfile = 'housing_2006.csv', method = 'curl')
data <- read.csv('housing_2006.csv')
intall.packages('data.table')
install.packages("data.table", dependencies=TRUE)
library(data.table)
head(DT)
DT <- data.table(data)
head(DT)
sapply(split(DT$pwgtp15,DT$SEX),mean)
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
system.time(DT[,mean(pwgtp15),by=SEX])
DT[,mean(pwgtp15),by=SEX]
system.time(DT[,mean(pwgtp15),by=SEX])
system.time(mean(DT$pwgtp15,by=DT$SEX))
system.time(mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15))
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
?system.time
system.time(mean(DT[DT$SEX==1,]$pwgtp15))
system.time(mean(DT[DT$SEX==2,]$pwgtp15))
system.time(mean(DT$pwgtp15,by=DT$SEX))
system.time(DT[,mean(pwgtp15),by=SEX])
system.time(rowMeans(DT)[DT$SEX==1])
system.time(rowMeans(DT)[DT$SEX==2])
system.time(rowMeans(DT)[DT$SEX==2])
rowMeans(DT)
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
## Tutorial ##
fileURL <- "https://www.realtor.com/realestateandhomes-search/Mahncke-Park_San-Antonio_TX"
xmlfile <- xmlTreeParse(fileURL)
rawToChar(GET(fileURL)$content)
xmltop <- xmlRoot(xmlfile)
xmlfile <- xmlTreeParse(rawToChar(GET(fileURL)$content))
xmltop <- xmlRoot(xmlfile)
xmlfile <- htmlTreeParse(rawToChar(GET(fileURL)$content))
xmltop <- xmlRoot(xmlfile)
mp <- xmlSApply(xmltop, function(x) xmlSApply(x, xmlValue))
mp_df <- data.frame(t(mp), row.names = NULL)
View(mp_df)
View(mp)
doc <- htmlTreeParse(rawToChar(GET(fileURL)$content))
doc <- xmlTreeParse(rawToChar(GET(fileURL)$content))
doc <- xmlTreeParse(fileURL)
doc <- xmlTreeParse(fileURL, useInternal = TRUE)
fileURL <- "https://www.realtor.com/realestateandhomes-search/Mahncke-Park_San-Antonio_TX"
doc <- htmlTreeParse(fileURL, useInternal = TRUE)
## Tutorial ##
fileURL <- "https://www.realtor.com/realestateandhomes-search/Mahncke-Park_San-Antonio_TX"
doc <- htmlTreeParse(fileURL, useInternal = TRUE)
install.packages('jsonlite')
## JSON
library(jsonlite)
jsonData <- fromJSON("https://www.realtytrac.com/mapsearch/real-estate/tx/bexar-county/")
fileURL <- 'https://www.realtytrac.com/mapsearch/real-estate/tx/bexar-county/'
doc <- xmlTreeParse(fileURL, useInternal = TRUE)
fileURL <- 'http://www.realtytrac.com/mapsearch/real-estate/tx/bexar-county/'
doc <- htmlTreeParse(fileURL, useInternal = TRUE)
fileURL <- 'https://www.realtytrac.com/mapsearch/real-estate/tx/bexar-county/'
doc <- htmlTreeParse(fileURL, useInternal = TRUE)
## xml
library(httr)
library(XML)
fileURL <- 'https://www.realtytrac.com/mapsearch/real-estate/tx/bexar-county/'
doc <- htmlTreeParse(fileURL, useInternal = TRUE)
## xml
library(httr)
library(XML)
fileURL <- 'https://www.realtytrac.com/mapsearch/real-estate/tx/bexar-county/'
r = GET(fileURL)
doc <- xmlTreeParse(r, useInternal=TRUE)
doc <- htmlTreeParse(r, useInternal=TRUE)
address <- xpathSApply(doc, "//propertyLink",xmlValue)
address <- xpathSApply(doc, "//ul@class='propertyLink'",xmlValue)
address <- xpathSApply(doc, "//ul[@class='propertyLink'[",xmlValue)
address <- xpathSApply(doc, "//span[@class='propertyinfo'[",xmlValue)
address <- xpathSApply(doc, "//span[@class='propertyInfo']",xmlValue)
head(address)
tail(address)
head(address,10)
address <- xpathSApply(doc, "//span[@class='itemProp']",xmlValue)
View(address)
address <- xpathSApply(doc, "//span[@class='itemprop']",xmlValue)
address <- xpathSApply(doc, "//div[@class='address-data']",xmlValue)
head(address)
HttpUtility.HtmlEncode()
.Replace("\n\r", "<br/>")
.Replace("\n", "<br/>")  // Or use &#012; if you want it "binary safe"
.Replace("\r", "<br/>")
.Replace("\t", "&#009;");
fileURL <- 'https://www.realtytrac.com/mapsearch/real-estate/tx/bexar-county/?sortbyfield=proximity,asc&itemsper=50'
r = GET(fileURL)
doc <- htmlTreeParse(r, useInternal=TRUE)
address <- xpathSApply(doc, "//div[@class='address-data']",xmlValue)
head(address)
# Replace all \n by spaces
doc.text = gsub('\\n', ' ', doc.text)
# Replace all \n by spaces
doc = gsub('\\n', ' ', doc)
doc.text <- unlist(xpathApply(doc.html, '//p', xmlValue))
doc.html <- htmlTreeParse(r, useInternal=TRUE)
doc.text <- unlist(xpathApply(doc.html, '//p', xmlValue))
head(doc.text)
# Replace all \n by spaces
doc = gsub('\\n', ' ', doc.text)
head(doc)
address <- xpathSApply(doc, "//div[@class='address-data']",xmlValue)
address <- gsub('\\n', ' ', address)
address <- xpathSApply(doc, "//div[@class='address-data']",xmlValue)
doc <- htmlTreeParse(r, useInternal=TRUE)
address <- xpathSApply(doc, "//div[@class='address-data']",xmlValue)
address <- gsub('\\n', ' ', address)
doc <- htmlTreeParse(r, useInternal=TRUE)
address <- xpathSApply(doc, "//div[@class='address-data']",xmlValue)
address <- gsub('\\n', ' ', address)
head(address)
address <- gsub('\\n', ' ', address)
head(address)
address <- gsub('\\r', ' ', address)
head(address)
address <- gsub('\\n', '', address)
address <- gsub('\\r', '', address)
head(address)
address <- xpathSApply(doc, "//span[@itemprop='streetAddress']",xmlValue)
address <- gsub('\\n', '', address)
address <- gsub('\\r', '', address)
head(addrss)
head(address)
fileURL <- 'https://www.realtytrac.com/mapsearch/real-estate/tx/bexar-county/?sortbyfield=proximity,asc&itemsper=50'
r = GET(fileURL)
doc <- htmlTreeParse(r, useInternal=TRUE)
address <- xpathSApply(doc, "//span[@itemprop='streetAddress']",xmlValue)
head(address)
address <- xpathSApply(doc, "//span[@itemprop='streetAddress']",xmlValue)
head(address)
real_estate <- function(url) {
r = GET(url)
doc <- htmlTreeParse(r, useInternal=TRUE)
propertyDet <- xpathSApply(doc, "//span[@class='propertyInfo']/dd",xmlValue)
# Replace all \n by spaces
street <- xpathSApply(doc, "//span[@itemprop='streetAddress']",xmlValue)
city <- xpathSApply(doc, "//span[@itemprop='addressLocality']",xmlValue)
state <- xpathSApply(doc, "//span[@itemprop='addressRegion']",xmlValue)
zip <- xpathSApply(doc, "//span[@itemprop='postalCode']",xmlValue)
price <- xpathSApply(doc, "//span[@class='propertyInfo']/dd[@class='price']",xmlValue)
bed <- propertyDet[seq(1,length(propertyDet),5)]
bath <- propertyDet[seq(2,length(propertyDet),5)]
sqft <- propertyDet[seq(3,length(propertyDet),5)]
property_df <- data.frame(cbind(street,city,state,zip,price,bed,bath,sqft))
property_df
}
str1 <- 'https://www.realtytrac.com/mapsearch/real-estate/tx/bexar-county/p-'
str2 <- '/?sortbyfield=proximity,asc&itemsper=50'
final <- data.frame(matrix(ncol = 8, nrow = 0))
colnames(final) <- c('street','state','state','zip','price','bed','bath','sqft')
for(i in 3:5) {
this.url <- paste(str1,i,str2,sep="")
temp.df <- real_estate(this.url)
final <- rbind(final,temp.df)
}
View(final)
fileURL <- 'https://www.realtytrac.com/mapsearch/real-estate/tx/bexar-county/p-3/?sortbyfield=featured,desc&itemsper=50'
r = GET(fileURL)
doc <- htmlTreeParse(r, useInternal=TRUE)
propertyDet <- xpathSApply(doc, "//span[@class='propertyInfo']/dd",xmlValue)
price <- xpathSApply(doc, "//span[@class='propertyInfo']/dd[@class='price']",xmlValue)
price
bed <- propertyDet[seq(1,length(propertyDet),5)]
bed
https://www.realtytrac.com/mapsearch/real-estate/tx/bexar-county/p-2/
str1 <- 'https://www.realtytrac.com/mapsearch/real-estate/tx/bexar-county/p-'
i<-1
this.url <- paste(str1,i,'/',sep="")
temp.df <- real_estate(this.url)
final <- rbind(final,temp.df)
final <- data.frame(matrix(ncol = 8, nrow = 0))
colnames(final) <- c('street','state','state','zip','price','bed','bath','sqft')
this.url <- paste(str1,i,'/',sep="")
temp.df <- real_estate(this.url)
final <- rbind(final,temp.df)
View(final)
fileURL <- 'https://www.realtytrac.com/mapsearch/real-estate/tx/bexar-county/p-1/'
r = GET(fileURL)
doc <- htmlTreeParse(r, useInternal=TRUE)
propertyDet <- xpathSApply(doc, "//span[@class='propertyInfo']/dd",xmlValue)
tail(propertyDet,20)
head(propertyDet,20)
propertyDet[30:40]
fileURL <- 'https://www.realtor.com/realestateandhomes-search/San-Antonio_TX/beds-1/baths-1/pg-2'
r = GET(fileURL)
doc <- htmlTreeParse(r, useInternal=TRUE)
propertyDet <- xpathSApply(doc, "//span[@class='propertyInfo']/dd",xmlValue)
street <- xpathSApply(doc, "//span[@itemprop='streetAddress']",xmlValue)
head(street)
city <- xpathSApply(doc, "//span[@itemprop='addressLocality']",xmlValue)
head(city)
city
state <- xpathSApply(doc, "//span[@itemprop='addressRegion']",xmlValue)
zip <- xpathSApply(doc, "//span[@itemprop='postalCode']",xmlValue)
street <- xpathSApply(doc, "//span[@class='listing-street-address']",xmlValue)
street
city <- xpathSApply(doc, "//span[@itemprop='listing-city']",xmlValue)
city <- xpathSApply(doc, "//span[@class='listing-city']",xmlValue)
state <- xpathSApply(doc, "//span[@class='listing-region']",xmlValue)
zip <- xpathSApply(doc, "//span[@class='listing-postal']",xmlValue)
bed <- xpathSApply(doc, "//span[@class='data-value meta-beds']",xmlValue)
bed <- xpathSApply(doc, "//li[@data-label='property-meta-beds']",xmlValue)
bed <- xpathSApply(doc, "//li[@data-label='property-meta-beds']/span[@class='data-value meta-beds'],xmlValue)
bed <- xpathSApply(doc, "//li[@data-label='property-meta-beds']/span[@class='data-value meta-beds']",xmlValue)
bed <- xpathSApply(doc, "//li[@data-label='property-meta-beds']/span[@class='data-value meta-beds']",xmlValue)
bath <- xpathSApply(doc, "//li[@data-label='property-meta-baths']/span[@class='data-value']",xmlValue)
sqft <- xpathSApply(doc, "//li[@data-label='property-meta-sqft']/span[@class='data-value']",xmlValue)
lotsize <- xpathSApply(doc, "//li[@data-label='property-meta-lotsize']/span[@class='data-value']",xmlValue)
n
city <- xpathSApply(doc, "//span[@class='listing-city']",xmlValue)
zip <- xpathSApply(doc, "//span[@class='listing-postal']",xmlValue)
bed <- xpathSApply(doc, "//li[@data-label='property-meta-beds']/span[@class='data-value meta-beds']",xmlValue)
sqft <- xpathSApply(doc, "//li[@data-label='property-meta-sqft']/span[@class='data-value']",xmlValue)
lotsize <- xpathSApply(doc, "//li[@data-label='property-meta-lotsize']/span[@class='data-value']",xmlValue)
price <- xpathSApply(doc, "//span[@class='propertyInfo']/dd[@class='price']",xmlValue)
price <- xpathSApply(doc, "//span[@class='data-price']",xmlValue)
property_df <- data.frame(cbind(street,city,state,zip,price,bed,bath,sqft,lotsize))
View(property_df)
doc <- htmlTreeParse(r, useInternal=TRUE)
real_estate <- function(url) {
r = GET(url)
doc <- htmlTreeParse(r, useInternal=TRUE)
# Replace all \n by spaces
street <- xpathSApply(doc, "//span[@class='listing-street-address']",xmlValue)
city <- xpathSApply(doc, "//span[@class='listing-city']",xmlValue)
state <- xpathSApply(doc, "//span[@class='listing-region']",xmlValue)
zip <- xpathSApply(doc, "//span[@class='listing-postal']",xmlValue)
price <- xpathSApply(doc, "//span[@class='data-price']",xmlValue)
bed <- xpathSApply(doc, "//li[@data-label='property-meta-beds']/span[@class='data-value meta-beds']",xmlValue)
bath <- xpathSApply(doc, "//li[@data-label='property-meta-baths']/span[@class='data-value']",xmlValue)
sqft <- xpathSApply(doc, "//li[@data-label='property-meta-sqft']/span[@class='data-value']",xmlValue)
lotsize <- xpathSApply(doc, "//li[@data-label='property-meta-lotsize']/span[@class='data-value']",xmlValue)
property_df <- data.frame(cbind(street,city,state,zip,price,bed,bath,sqft,lotsize))
property_df
}
df <- real_estate('https://www.realtor.com/realestateandhomes-search/San-Antonio_TX/beds-1/baths-1/pg-2')
View(df)
my_url <- 'https://www.realtor.com/realestateandhomes-search/San-Antonio_TX/beds-1/baths-1/pg-2'
df <- real_estate(my_url)
doc <- htmlTreeParse(r, useInternal=TRUE,encoding = character())
real_estate <- function(url) {
r = GET(url)
doc <- htmlTreeParse(r, useInternal=TRUE,encoding = character())
# Replace all \n by spaces
street <- xpathSApply(doc, "//span[@class='listing-street-address']",xmlValue)
city <- xpathSApply(doc, "//span[@class='listing-city']",xmlValue)
state <- xpathSApply(doc, "//span[@class='listing-region']",xmlValue)
zip <- xpathSApply(doc, "//span[@class='listing-postal']",xmlValue)
price <- xpathSApply(doc, "//span[@class='data-price']",xmlValue)
bed <- xpathSApply(doc, "//li[@data-label='property-meta-beds']/span[@class='data-value meta-beds']",xmlValue)
bath <- xpathSApply(doc, "//li[@data-label='property-meta-baths']/span[@class='data-value']",xmlValue)
sqft <- xpathSApply(doc, "//li[@data-label='property-meta-sqft']/span[@class='data-value']",xmlValue)
lotsize <- xpathSApply(doc, "//li[@data-label='property-meta-lotsize']/span[@class='data-value']",xmlValue)
property_df <- data.frame(cbind(street,city,state,zip,price,bed,bath,sqft,lotsize))
property_df
}
df <- real_estate(my_url)
stringi::stri_enc_detect(content(r, "raw"))
content(r, "text", encoding = "UTF-8")
doc <- content(r, "text", encoding = "UTF-8")
street <- xpathSApply(doc, "//span[@class='listing-street-address']",xmlValue)
## xml
library(httr)
library(XML)
fileURL <- 'https://www.realtor.com/realestateandhomes-search/San-Antonio_TX/beds-1/baths-1/pg-2'
r = GET(fileURL)
doc <- htmlTreeParse(r, useInternal=TRUE)
propertyDet <- xpathSApply(doc, "//span[@class='propertyInfo']/dd",xmlValue)
# Replace all \n by spaces
street <- xpathSApply(doc, "//span[@class='listing-street-address']",xmlValue)
city <- xpathSApply(doc, "//span[@class='listing-city']",xmlValue)
state <- xpathSApply(doc, "//span[@class='listing-region']",xmlValue)
zip <- xpathSApply(doc, "//span[@class='listing-postal']",xmlValue)
price <- xpathSApply(doc, "//span[@class='data-price']",xmlValue)
bed <- xpathSApply(doc, "//li[@data-label='property-meta-beds']/span[@class='data-value meta-beds']",xmlValue)
bath <- xpathSApply(doc, "//li[@data-label='property-meta-baths']/span[@class='data-value']",xmlValue)
sqft <- xpathSApply(doc, "//li[@data-label='property-meta-sqft']/span[@class='data-value']",xmlValue)
lotsize <- xpathSApply(doc, "//li[@data-label='property-meta-lotsize']/span[@class='data-value']",xmlValue)
property_df <- data.frame(cbind(street,city,state,zip,price,bed,bath,sqft,lotsize))
fileURL <- 'https://www.realtor.com/realestateandhomes-search/San-Antonio_TX/beds-1/baths-1/pg-2'
r = GET(fileURL)
doc <- htmlTreeParse(r, useInternal=TRUE)
fileURL <- 'https://www.realtor.com/realestateandhomes-search/San-Antonio_TX/beds-1/baths-1/pg-2'
r = GET(fileURL)
doc <- htmlTreeParse(r, useInternal=TRUE)
r = GET(fileURL)
doc <- htmlTreeParse(r, useInternal=TRUE, encoding = "UTF-8")
doc <- htmlTreeParse(fileURL, useInternal=TRUE, encoding = "UTF-8")
doc <- htmlTreeParse(fileURL, useInternal=TRUE)
doc <- htmlTreeParse(fileURL, useInternal=TRUE, isURL=T)
fileURL <- 'https://www.realtor.com/realestateandhomes-search/San-Antonio_TX/beds-1/baths-1/pg-2'
fileURL <- 'http://www.realtor.com/realestateandhomes-search/San-Antonio_TX/beds-1/baths-1/pg-2'
doc <- htmlTreeParse(fileURL, useInternal=TRUE, isURL=T)
r = GET(fileURL)
doc <- htmlTreeParse(fileURL, useInternal=TRUE, isURL=T)
fileURL <- 'https://www.realtor.com/realestateandhomes-search/San-Antonio_TX/beds-1/baths-1/pg-2'
r = GET(fileURL)
doc <- htmlTreeParse(fileURL, useInternal=TRUE, isURL=T)
