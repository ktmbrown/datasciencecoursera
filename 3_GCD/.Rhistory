return('<NA>')
}
print(c(nrow(df),',',r))
hn <- df[df$Rank == r,2]
}
x<-rankall('pneumonia','worst')
# find and return Hospita.Name by rank
hosp_name <- function(df,num) {
if(num == 'best') {
r = 1
} else if(num == 'worst') {
r = nrow(df)
} else {
r = num
}
if(r > nrow(df))
{
return('<NA>')
}
hn <- df[df$Rank == r,2]
}
x<-rankall('pneumonia','worst')
x
hosp_name <- function(df,num) {
if(num == 'best') {
r = 1
} else if(num == 'worst') {
r = nrow(df)
} else {
r = num
}
if(r > nrow(df))
{
return('<NA>')
}
print(df[df$Rank == r,2])
hn <- df[df$Rank == r,2]
}
x<-rankall('pneumonia','worst')
hosp_name <- function(df,num) {
if(num == 'best') {
r = 1
} else if(num == 'worst') {
r = nrow(df)
} else {
r = num
}
if(r > nrow(df))
{
return('<NA>')
}
print(r)
hn <- df[df$Rank == r,2]
}
x<-rankall('pneumonia','worst')
# find and return Hospita.Name by rank
hosp_name <- function(df,num) {
if(num == 'best') {
r = 1
} else if(num == 'worst') {
r = nrow(df)
} else {
r = num
}
if(r > nrow(df))
{
return('<NA>')
}
print(r)
print(df[r,])
hn <- df[df$Rank == r,2]
}
x<-rankall('pneumonia','worst')
# find and return Hospita.Name by rank
hosp_name <- function(df,num) {
print(tail(df))
if(num == 'best') {
r = 1
} else if(num == 'worst') {
r = nrow(df)
} else {
r = num
}
if(r > nrow(df))
{
return('<NA>')
}
hn <- df[df$Rank == r,2]
}
x<-rankall('pneumonia','worst')
y<-df_outcome[!is.na(df_outcome$pneumonia),]
head(y)
head(df_outcome)
tail(df_outcome)
tail(y)
y<-df_outcome[!is.na(df_outcome[[pneumonia]]),]
y<-df_outcome[!is.na(df_outcome[[outcome]]),]
y
rank_df <- function(df,outcome) {
df <- df[order(df[[outcome]], df[['Hospital.Name']]),]
Rank <- c(1:nrow(df))
names(Rank) <- c('Rank')
df <- cbind(df,Rank)
df
}
df_result
rank_df <- function(df,outcome) {
df <- df[order(df[[outcome]], df[['Hospital.Name']]),]
Rank <- c(1:nrow(df))
names(Rank) <- c('Rank')
df <- cbind(df,Rank)
df
}
rank_df <- function(df,outcome) {
df <- df[order(df[[outcome]], df[['Hospital.Name']]),]
Rank <- c(1:nrow(df))
names(Rank) <- c('Rank')
df <- cbind(df,Rank)
df
}
hosp_name <- function(df,num) {
if(num == 'best') {
r = 1
} else if(num == 'worst') {
r = nrow(df)
} else {
r = num
}
if(r > nrow(df))
{
return('<NA>')
}
hn <- df[df$Rank == r,2]
}
rankall <- function(outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv",
na.strings = "Not Available",
stringsAsFactors = FALSE)[ ,c(1, 2,7,11,17,23)]
names(data) <- c('Provider.Number','Hospital.Name','State','heart.attack',
'heart.failure','pneumonia')
outcome <- gsub(" ", ".",outcome)
df_outcome <- data[,c(1,2,3,match(outcome,names(data)))]
## removing NAs by outcome
df_outcome <- df_outcome[!is.na(df_outcome[[outcome]])]
## Check that outcome is valid
if(!(outcome %in% names(data)[4:6])) {
stop("invalid outcome")
}
## for each state, find the hospital with the given rank
# split by state, sort and add rank
bystate <- split(df_outcome,df_outcome$State)
df_sorted <- lapply(bystate,rank_df,outcome)
# get provider numbers by rank
hn <- sapply(df_sorted,hosp_name,num)
# creating resulting df
df_result <- data.frame(matrix(ncol = 2, nrow = 54))
c_n <- c('hospital','state')
r_n <- names(hn)
colnames(df_result) <- c_n
rownames(df_result) <- r_n
# filling resulting df
df_result$state <- r_n
df_result$hospital <- hn
# find and return Hospita.Name by rank
hosp_name <- function(df,num) {
if(num == 'best') {
r = 1
} else if(num == 'worst') {
r = nrow(df)
} else {
r = num
}
if(r > nrow(df))
{
return('<NA>')
}
hn <- df[df$Rank == r,2]
}
# sort a df by outcome then name and return sorted df with rank column
rank_df <- function(df,outcome) {
df <- df[order(df[[outcome]], df[['Hospital.Name']]),]
Rank <- c(1:nrow(df))
names(Rank) <- c('Rank')
df <- cbind(df,Rank)
df
}
df_result
}
x <- rankall('pneumonia','worst')
rankall <- function(outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv",
na.strings = "Not Available",
stringsAsFactors = FALSE)[ ,c(1, 2,7,11,17,23)]
names(data) <- c('Provider.Number','Hospital.Name','State','heart.attack',
'heart.failure','pneumonia')
outcome <- gsub(" ", ".",outcome)
df_outcome <- data[,c(1,2,3,match(outcome,names(data)))]
## removing NAs by outcome
df_outcome <- df_outcome[!is.na(df_outcome[[outcome]]),]
## Check that outcome is valid
if(!(outcome %in% names(data)[4:6])) {
stop("invalid outcome")
}
## for each state, find the hospital with the given rank
# split by state, sort and add rank
bystate <- split(df_outcome,df_outcome$State)
df_sorted <- lapply(bystate,rank_df,outcome)
# get provider numbers by rank
hn <- sapply(df_sorted,hosp_name,num)
# creating resulting df
df_result <- data.frame(matrix(ncol = 2, nrow = 54))
c_n <- c('hospital','state')
r_n <- names(hn)
colnames(df_result) <- c_n
rownames(df_result) <- r_n
# filling resulting df
df_result$state <- r_n
df_result$hospital <- hn
# find and return Hospita.Name by rank
hosp_name <- function(df,num) {
if(num == 'best') {
r = 1
} else if(num == 'worst') {
r = nrow(df)
} else {
r = num
}
if(r > nrow(df))
{
return('<NA>')
}
hn <- df[df$Rank == r,2]
}
# sort a df by outcome then name and return sorted df with rank column
rank_df <- function(df,outcome) {
df <- df[order(df[[outcome]], df[['Hospital.Name']]),]
Rank <- c(1:nrow(df))
names(Rank) <- c('Rank')
df <- cbind(df,Rank)
df
}
df_result
}
x <- rankall('pneumonia','worst')
tail(x)
# sort a df by outcome then name and return sorted df with rank column
rank_df <- function(df,outcome) {
df <- df[order(df[[outcome]], df[['Hospital.Name']]),]
Rank <- c(1:nrow(df))
names(Rank) <- c('Rank')
df <- cbind(df,Rank)
df
}
hosp_name <- function(df,num) {
if(num == 'best') {
r = 1
} else if(num == 'worst') {
r = nrow(df)
} else {
r = num
}
if(r > nrow(df))
{
return('<NA>')
}
hn <- df[df$Rank == r,2]
}
rankall <- function(outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv",
na.strings = "Not Available",
stringsAsFactors = FALSE)[ ,c(1, 2,7,11,17,23)]
names(data) <- c('Provider.Number','Hospital.Name','State','heart.attack',
'heart.failure','pneumonia')
outcome <- gsub(" ", ".",outcome)
df_outcome <- data[,c(1,2,3,match(outcome,names(data)))]
## removing NAs by outcome
df_outcome <- df_outcome[!is.na(df_outcome[[outcome]]),]
## Check that outcome is valid
if(!(outcome %in% names(data)[4:6])) {
stop("invalid outcome")
}
## for each state, find the hospital with the given rank
# split by state, sort and add rank
bystate <- split(df_outcome,df_outcome$State)
df_sorted <- lapply(bystate,rank_df,outcome)
# get provider numbers by rank
hn <- sapply(df_sorted,hosp_name,num)
# creating resulting df
df_result <- data.frame(matrix(ncol = 2, nrow = 54))
c_n <- c('hospital','state')
r_n <- names(hn)
colnames(df_result) <- c_n
rownames(df_result) <- r_n
# filling resulting df
df_result$state <- r_n
df_result$hospital <- hn
# find and return Hospita.Name by rank
hosp_name <- function(df,num) {
if(num == 'best') {
r = 1
} else if(num == 'worst') {
r = nrow(df)
} else {
r = num
}
if(r > nrow(df))
{
return('<NA>')
}
hn <- df[df$Rank == r,2]
}
# sort a df by outcome then name and return sorted df with rank column
rank_df <- function(df,outcome) {
df <- df[order(df[[outcome]], df[['Hospital.Name']]),]
Rank <- c(1:nrow(df))
names(Rank) <- c('Rank')
df <- cbind(df,Rank)
df
}
df_result
}
rankhospital <- function( state, outcome, num ) {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv",
na.strings = "Not Available",
stringsAsFactors = FALSE)
mortality_names <- c("heart.attack","heart.failure","pneumonia")
names(data)[c(11,17,23)] = mortality_names
outcome <- gsub(" ", ".",outcome)
## Check that state and outcome are valid
if(!(state %in% data$State)) {
stop("invalid state")
}
if(!(outcome %in% mortality_names)) {
stop("invalid outcome")
}
## Return hospital name in that state with the given rank
## 30-day death rate
df <- data[data$State==state,]
df <- df[,c('Hospital.Name', outcome)]
names(df)[2] <- 'Rate'
ordered_df <- df[order(df$Rate,df$Hospital.Name),]
r <- nrow(ordered_df)
Rank <- 1:r
final <- cbind(ordered_df,Rank)
if(num == "best")
{
num <- 1
}
if(num == "worst") {
maxInd <- which.max(final[,'Rate'])
num <- final[maxInd,'Rank']
}
if(num > r) {
return(NA)
}
rankedhosp<-final[final$Rank == num, 1]
rankedhosp
}
# returns a character vector with the name of the hospital that has the lowest
# 30-mortality for the specified outcome in that state
best <- function( state, outcome ) {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv",
na.strings = "Not Available",
stringsAsFactors = FALSE)
mortality_names <- c("heart.attack","heart.failure","pneumonia")
names(data)[c(11,17,23)] = mortality_names
outcome <- gsub(" ", ".",outcome)
## Check that state and outcome are valid
if(!(state %in% data$State)) {
stop("invalid state")
}
if(!(outcome %in% mortality_names)) {
stop("invalid outcome")
}
## Return hospital name in that state with lowest 30-day death rate
df <- data[data$State==state,]
minIndex <- which.min(df[,outcome])
best <- df[minIndex,2]
best
}
best("SC", "heart attack")
best("NY", "pneumonia")
best("AK", "pneumonia")
rankhospital("NC", "heart attack", "worst")
rankhospital("WA", "heart attack", 7)
rankhospital("TX", "pneumonia", 10)
rankhospital("NY", "heart attack", 7)
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
r <- rankall("pneumonia", "worst")
as.character(subset(r, state == "NJ")$hospital)
r <- rankall("heart failure", 10)
as.character(subset(r, state == "NV")$hospital)
getwd()
setwd('..')
getsd()
getwd()
setwd('..')
getwd()
dir.create(file.path(getwd(),'3_GCD'))
setwd('/3_GCD')
setwd('\3_CGD')
setwd('~/3_CGD')
setwd('../3_GCD')
setwd('..\3_GCD')
setwd("./3_GCD")
getwd()
install.packages(htmlTreeParse)
install.packages(htmlTreeParse'')
install.packages('htmlTreeParse')
?htmlTreeParse
install.packages('xmlParse')
install.packages('xmlTreeParse')
install.packages('xml')
install.packages('XML')
library(XML)
# web scraping
fileURL <- 'http://books.toscrape.com/'
doc <- htmlTreeParse(fileURL, useInternalNodes = TRUE)
library(XML)
# web scraping
fileURL <- 'http://books.toscrape.com/'
doc <- htmlTreeParse(fileURL, useInternalNodes = TRUE)
categories <- xpathSApply(doc,"//li[@class='side_categories']",xmlValue)
categories <- xpathSApply(doc,"//div[@class='side_categories']",xmlValue)
length(categories)
?xpathSApply
?xpath
categories <- xpathSApply(doc,"//div[@class='side-categories']",xmlValue)
sideCat <- xpathSApply(doc,"//side_categories",xmlValue)
View(sideCat)
sideCat <- xpathSApply(doc,"//@side_categories",xmlValue)
sideCat <- xpathSApply(doc,"/@side_categories",xmlValue)
categories <- xpathSApply(doc,"//div[@class='side_categories']",xmlValue)
categories
categories <- xpathSApply(doc,"//div[@class='container-fluid page']",xmlValue)
categories
hrefs <- xpathSApply(doc, "//div/a", xmlGetAttr, 'href')
hrefs[1]
hrefs
hrefs <- xpathSApply(doc, "//div/[@class='side_categories']a", xmlGetAttr, 'href')
hrefs <- xpathSApply(doc, "//div/[@class='side_categories']/a", xmlGetAttr, 'href')
hrefs <- xpathSApply(doc, "//div/a[@class='side_categories']", xmlGetAttr, 'href')
hrefs <- xpathSApply(doc, "//div/a", xmlGetAttr, 'href')
xmlRoot(doc)
html
hrefs
hrefs <- xpathSApply(doc, "/div/a", xmlGetAttr, 'href')
hrefs <- xpathSApply(doc, "//div/a", xmlGetAttr, 'href')
titles <- xpathSApply(doc, "//div/a", xmlGetAttr, 'title')
View(titles)
titles <- xpathSApply(doc, "//div/a", xmlGetAttr, 'alt')
titles <- xpathSApply(doc, "//div/img", xmlGetAttr, 'alt')
imgs <- xpathSApply(doc, "//div/img", xmlGetAttr, 'src')
View(imgs)
hrefs <- xpathSApply(doc, "//div/a", xmlGetAttr, 'href')
titles <- xpathSApply(doc, "//div/a", xmlValue)
titles
titles <- xpathSApply(doc, "//div/a", xmlGetAttr, 'title')
hrefs <- xpathSApply(doc, "//div/a", xmlGetAttr, 'href')
library(XML)
# web scraping
fileURL <- 'http://books.toscrape.com/index.html'
doc <- htmlTreeParse(fileURL, useInternalNodes = TRUE)
hrefs <- xpathSApply(doc, "//div/a", xmlGetAttr, 'href')
categories <- xpathSApply(doc,"//div[@class='container-fluid page']",xmlValue)
library(XML)
# web scraping
fileURL <- 'http://books.toscrape.com/index.html'
doc <- htmlTreeParse(fileURL, useInternalNodes = TRUE)
hrefs <- xpathSApply(doc, "//div/a", xmlGetAttr, 'href')
categories <- xpathSApply(doc,"//div[@class='container-fluid page']",xmlValue)
hrefs
titles <- xpathSApply(doc, "//div/a", xmlGetAttr, 'title')
View(titles)
install.packages('data.table')
library(data.table)
DF <- data.frame(x=rnorm(9),y=rep(c('a','b','c'),each=3),z=rnorm(9))
DF
DT <- data.table(x=rnorm(9),y=rep(c('a','b','c'),each=3),z=rnorm(9))
DT
DF[2,]
DT[2,]
Dt[DT[y=="a"]]
DT[DT[y=="a"]]
DT[DT[y=="a"],]
DT[DT$y=="a",]
zet <- 'y'
DT$zet
DT[set]
DT[zet]
DT[[zet]]
DT[c(2,3)]
DT[,c(2,3)]
z <- DT[,c(2,3)]
z
DT[,list(mean(x),sum(z))]
# new columns
DT[,w:=z^2]
DT
DT2 <- DT
DT[,y:=2]
DT2 <- DT
DT[,y:=2]
Dt
DT
DT2
