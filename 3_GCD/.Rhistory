outcome_index <- match(outcome,names(data))
df <- cbind(data[,c(2,7,outcome_index)])
df <- df[!is.na(df[[outcome]]),]
## Check outcome
if(!(outcome %in% mortality_names)) {
stop("invalid outcome")
}
if(num == "best") {
num == 1
}
## For each state, find the hospital of the given rank
by_state <- split(df,df$State)
result_df <- data.frame('Hospital.Name' = character(),
'State' = character())
for(s in names(by_state)) {
if(num > nrow(by_state[[s]])) {
r <- c('<NA>','S')
names(r) <- names(result_df)
result_df <- rbind(result_df,r)
}
by_state[[s]] <- by_state[[s]][order(by_state[[s]][[outcome]],
by_state[[s]]$Hospital.Name),]
rank <- c(1:nrow(by_state[[s]]))
by_state[[s]] <- cbind(by_state[[s]],rank)
max_index <- max(by_state[[s]][[outcome]])
if(num == "worst") {
num <- max_index
}
result_df <- rbind(result_df,by_state[[s]][by_state[[s]]$rank == num,])
}
result_df[,c(1,2)]
}
z <- rankall("heart attack",20)
# This function takes 2 arguments: name of outcome and a hosptial ranking and
# returns a 2-column data frame containing the hospital in each state
# that has a ranking specified in num
## Read outcome data
rankall <- function( outcome, num = "best" ) {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv",
na.strings = "Not Available",
stringsAsFactors = FALSE)
## change format of outcome
outcome <- gsub(" ", ".",outcome)
## change names to match format of outcome
mortality_names <- c("heart.attack","heart.failure","pneumonia")
names(data)[c(11,17,23)] = mortality_names
## grab the data we need
outcome_index <- match(outcome,names(data))
df <- cbind(data[,c(2,7,outcome_index)])
df <- df[!is.na(df[[outcome]]),]
## Check outcome
if(!(outcome %in% mortality_names)) {
stop("invalid outcome")
}
if(num == "best") {
num == 1
}
## For each state, find the hospital of the given rank
by_state <- split(df,df$State)
result_df <- data.frame('Hospital.Name' = character(),
'State' = character())
print(names(result_df))
for(s in names(by_state)) {
if(num > nrow(by_state[[s]])) {
r <- c('<NA>','S')
names(r) <- names(result_df)
result_df <- rbind(result_df,r)
}
by_state[[s]] <- by_state[[s]][order(by_state[[s]][[outcome]],
by_state[[s]]$Hospital.Name),]
rank <- c(1:nrow(by_state[[s]]))
by_state[[s]] <- cbind(by_state[[s]],rank)
max_index <- max(by_state[[s]][[outcome]])
if(num == "worst") {
num <- max_index
}
result_df <- rbind(result_df,by_state[[s]][by_state[[s]]$rank == num,])
}
result_df[,c(1,2)]
}
z <- rankall("heart attack",20)
# This function takes 2 arguments: name of outcome and a hosptial ranking and
# returns a 2-column data frame containing the hospital in each state
# that has a ranking specified in num
## Read outcome data
rankall <- function( outcome, num = "best" ) {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv",
na.strings = "Not Available",
stringsAsFactors = FALSE)
## change format of outcome
outcome <- gsub(" ", ".",outcome)
## change names to match format of outcome
mortality_names <- c("heart.attack","heart.failure","pneumonia")
names(data)[c(11,17,23)] = mortality_names
## grab the data we need
outcome_index <- match(outcome,names(data))
df <- cbind(data[,c(2,7,outcome_index)])
df <- df[!is.na(df[[outcome]]),]
## Check outcome
if(!(outcome %in% mortality_names)) {
stop("invalid outcome")
}
if(num == "best") {
num == 1
}
## For each state, find the hospital of the given rank
by_state <- split(df,df$State)
result_df <- data.frame('Hospital.Name' = character(),
'State' = character())
print(names(result_df))
for(s in names(by_state)) {
if(num > nrow(by_state[[s]])) {
r <- data.frame('<NA>',s)
names(r) <- names(result_df)
result_df <- rbind(result_df,r)
}
by_state[[s]] <- by_state[[s]][order(by_state[[s]][[outcome]],
by_state[[s]]$Hospital.Name),]
rank <- c(1:nrow(by_state[[s]]))
by_state[[s]] <- cbind(by_state[[s]],rank)
max_index <- max(by_state[[s]][[outcome]])
if(num == "worst") {
num <- max_index
}
result_df <- rbind(result_df,by_state[[s]][by_state[[s]]$rank == num,])
}
result_df[,c(1,2)]
}
z <- rankall("heart attack",20)
head(z$AK)
# This function takes 2 arguments: name of outcome and a hosptial ranking and
# returns a 2-column data frame containing the hospital in each state
# that has a ranking specified in num
## Read outcome data
rankall <- function( outcome, num = "best" ) {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv",
na.strings = "Not Available",
stringsAsFactors = FALSE)
## change format of outcome
outcome <- gsub(" ", ".",outcome)
## change names to match format of outcome
mortality_names <- c("heart.attack","heart.failure","pneumonia")
names(data)[c(11,17,23)] = mortality_names
## grab the data we need
outcome_index <- match(outcome,names(data))
df <- cbind(data[,c(2,7,outcome_index)])
df <- df[!is.na(df[[outcome]]),]
## Check outcome
if(!(outcome %in% mortality_names)) {
stop("invalid outcome")
}
if(num == "best") {
num == 1
}
## For each state, find the hospital of the given rank
by_state <- split(df,df$State)
result_df <- data.frame('Hospital.Name' = character(),
'State' = character())
print(names(result_df))
for(s in names(by_state)) {
if(num > nrow(by_state[[s]])) {
r <- data.frame('<NA>',s)
names(r) <- names(result_df)
result_df <- rbind(result_df,r)
}
by_state[[s]] <- by_state[[s]][order(by_state[[s]][[outcome]],
by_state[[s]]$Hospital.Name),]
rank <- c(1:nrow(by_state[[s]]))
by_state[[s]] <- cbind(by_state[[s]],rank)
temp_df <- by_state[[s]][,c(by_state[[s]]$Hospital.Name,by_state[[s]]$State)]
max_index <- max(by_state[[s]][[outcome]])
if(num == "worst") {
num <- max_index
}
result_df <- rbind(result_df,temp_df[temp_df$rank == num,])
}
result_df
}
z <- rankall("heart attack",20)
# This function takes 2 arguments: name of outcome and a hosptial ranking and
# returns a 2-column data frame containing the hospital in each state
# that has a ranking specified in num
## Read outcome data
rankall <- function( outcome, num = "best" ) {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv",
na.strings = "Not Available",
stringsAsFactors = FALSE)
## change format of outcome
outcome <- gsub(" ", ".",outcome)
## change names to match format of outcome
mortality_names <- c("heart.attack","heart.failure","pneumonia")
names(data)[c(11,17,23)] = mortality_names
## grab the data we need
outcome_index <- match(outcome,names(data))
df <- cbind(data[,c(2,7,outcome_index)])
df <- df[!is.na(df[[outcome]]),]
## Check outcome
if(!(outcome %in% mortality_names)) {
stop("invalid outcome")
}
if(num == "best") {
num == 1
}
## For each state, find the hospital of the given rank
by_state <- split(df,df$State)
result_df <- data.frame('Hospital.Name' = character(),
'State' = character())
print(names(result_df))
for(s in names(by_state)) {
if(num > nrow(by_state[[s]])) {
r <- data.frame('<NA>',s)
names(r) <- names(result_df)
result_df <- rbind(result_df,r)
}
by_state[[s]] <- by_state[[s]][order(by_state[[s]][[outcome]],
by_state[[s]]$Hospital.Name),]
rank <- c(1:nrow(by_state[[s]]))
by_state[[s]] <- cbind(by_state[[s]],rank)
temp_df <- by_state[[s]][,c(1,2)]
max_index <- max(by_state[[s]][[outcome]])
if(num == "worst") {
num <- max_index
}
result_df <- rbind(result_df,temp_df[temp_df$rank == num,])
}
result_df
}
z <- rankall("heart attack",20)
head(z)
# This function takes 2 arguments: name of outcome and a hosptial ranking and
# returns a 2-column data frame containing the hospital in each state
# that has a ranking specified in num
## Read outcome data
rankall <- function( outcome, num = "best" ) {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv",
na.strings = "Not Available",
stringsAsFactors = FALSE)
## change format of outcome
outcome <- gsub(" ", ".",outcome)
## change names to match format of outcome
mortality_names <- c("heart.attack","heart.failure","pneumonia")
names(data)[c(11,17,23)] = mortality_names
## grab the data we need
outcome_index <- match(outcome,names(data))
df <- cbind(data[,c(2,7,outcome_index)])
df <- df[!is.na(df[[outcome]]),]
## Check outcome
if(!(outcome %in% mortality_names)) {
stop("invalid outcome")
}
if(num == "best") {
num == 1
}
## For each state, find the hospital of the given rank
by_state <- split(df,df$State)
result_df <- data.frame('Hospital.Name' = character(),
'State' = character())
print(names(result_df))
for(s in names(by_state)) {
if(num > nrow(by_state[[s]])) {
r <- data.frame('<NA>',s)
names(r) <- names(result_df)
result_df <- rbind(result_df,r)
} else {
by_state[[s]] <- by_state[[s]][order(by_state[[s]][[outcome]],
by_state[[s]]$Hospital.Name),]
rank <- c(1:nrow(by_state[[s]]))
by_state[[s]] <- cbind(by_state[[s]],rank)
temp_df <- by_state[[s]][,c(1,2)]
max_index <- max(by_state[[s]][[outcome]])
if(num == "worst") {
num <- max_index
}
result_df <- rbind(result_df,temp_df[temp_df$rank == num,])
}
}
result_df
}
z <- rankall("heart attack",20)
head(z)
# This function takes 2 arguments: name of outcome and a hosptial ranking and
# returns a 2-column data frame containing the hospital in each state
# that has a ranking specified in num
## Read outcome data
rankall <- function( outcome, num = "best" ) {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv",
na.strings = "Not Available",
stringsAsFactors = FALSE)
## change format of outcome
outcome <- gsub(" ", ".",outcome)
## change names to match format of outcome
mortality_names <- c("heart.attack","heart.failure","pneumonia")
names(data)[c(11,17,23)] = mortality_names
## grab the data we need
outcome_index <- match(outcome,names(data))
df <- cbind(data[,c(2,7,outcome_index)])
df <- df[!is.na(df[[outcome]]),]
## Check outcome
if(!(outcome %in% mortality_names)) {
stop("invalid outcome")
}
if(num == "best") {
num == 1
}
## For each state, find the hospital of the given rank
by_state <- split(df,df$State)
result_df <- data.frame('Hospital.Name' = character(),
'State' = character())
print(names(result_df))
for(s in names(by_state)) {
if(num > nrow(by_state[[s]])) {
r <- data.frame('<NA>',s)
names(r) <- names(result_df)
result_df <- rbind(result_df,r)
} else {
by_state[[s]] <- by_state[[s]][order(by_state[[s]][[outcome]],
by_state[[s]]$Hospital.Name),]
rank <- c(1:nrow(by_state[[s]]))
by_state[[s]] <- cbind(by_state[[s]],rank)
temp_df <- by_state[[s]][,c(1,2)]
print(head(temp_df))
max_index <- max(by_state[[s]][[outcome]])
if(num == "worst") {
num <- max_index
}
result_df <- rbind(result_df,temp_df[temp_df$rank == num,])
}
}
result_df
}
head(z)
z <- rankall("heart attack",20)
head(z)
getwd()
cd(/..)
setwd(/..)
setwd(../)
setwd('/..')
getwd()
setwd('/Users/katiebrown/Documents/DS/datasciencecoursera/')
setwd('/Users/katiebrown/Documents/DS/datasciencecoursera/3_GCD')
## xml
library(httr)
library(XML)
install.packages('xml')
install.packages('XML')
## xml
library(httr)
library(XML)
fileURL <- 'https://www.realtytrac.com/mapsearch/real-estate/tx/bexar-county/?sortbyfield=proximity,asc&itemsper=50'
r = GET(fileURL)
doc <- htmlTreeParse(r, useInternal=TRUE)
street <- xpathSApply(doc, "//span[@itemprop='streetAddress']",xmlValue)
head(street)
city <- xpathSApply(doc, "//span[@itemprop='addressLocality']",xmlValue)
state <- xpathSApply(doc, "//span[@itemprop='addressRegion]",xmlValue)
state <- xpathSApply(doc, "//span[@itemprop='postalCode]",xmlValue)
street <- xpathSApply(doc, "//span[@itemprop='streetAddress']",xmlValue)
city <- xpathSApply(doc, "//span[@itemprop='addressLocality']",xmlValue)
state <- xpathSApply(doc, "//span[@itemprop='addressRegion']",xmlValue)
state <- xpathSApply(doc, "//span[@itemprop='postalCode']",xmlValue)
zip <- xpathSApply(doc, "//span[@itemprop='postalCode']",xmlValue)
state <- xpathSApply(doc, "//span[@itemprop='addressRegion']",xmlValue)
bed <- xpathSApply(doc, "//span[@class='propertyInfo]",xmlValue)
bed <- xpathSApply(doc, "//span[@class='propertyInfo']",xmlValue)
head(bed)
details <- xpathSApply(doc, "//span[@class='propertyInfo']",xmlValue)
bed <- xpathSApply(doc, "//span[@class='propertyInfo']",xmlValue)[1]
head(bed)
bed <- xpathSApply(doc, "//span[@class='propertyInfo']",xmlValue)[[1]]
bed
sqft <- xpathSApply(doc, "//span[@class='propertyInfo']",xmlValue)[3]
sqft
zip <- xpathSApply(doc, "//span[@itemprop='postalCode']",xmlValue)
zip
price <- xpathSApply(doc, "/span[@class='propertyInfo']",xmlValue)
price <- xpathSApply(doc, "//span[@class='propertyInfo']",xmlValue)
head(price,6)
head(price,7)
price <- xpathSApply(doc, "//span[@class='propertyInfo']/dd",xmlValue)
price <- xpathSApply(doc, "//span[@class='propertyInfo']/dt",xmlValue)
price <- xpathSApply(doc, "//span[@class='propertyInfo']/dd",xmlValue)
price
head(price)
price <- xpathSApply(doc, "//span[@class='propertyInfo']/dd[1]",xmlValue)
price <- xpathSApply(doc, "//span[@class='propertyInfo']/dd[1]",xmlValue)
price <- xpathSApply(doc, "//span[@class='propertyInfo']/dd",xmlValue)
price
price <- xpathSApply(doc, "//span[@class='propertyInfo']/dt",xmlValue)
head(price)
price <- xpathSApply(doc, "//span[@class='propertyInfo']/dd[@class='price']",xmlValue)
head(price)
sqft <- xpathSApply(doc, "//span[@class='propertyInfo']/dd[@class='sqft']",xmlValue)
[@class='sqft']
sqft <- xpathSApply(doc, "//span[@class='propertyInfo']/dd",xmlValue)
bed <- propertyDet[propertyDet%3==0]
bed <- propertyDet[propertyDet%%3==0]
propertyDet <- xpathSApply(doc, "//span[@class='propertyInfo']/dd",xmlValue)
bed <- propertyDet[propertyDet%%3==0]
bed <- propertyDet[seq(1,len(propertyDet),3)
bed <- propertyDet[seq(1,len(propertyDet),3)
bed <- propertyDet[seq(1,len(propertyDet),3)]
bed <- propertyDet[seq(1,length(propertyDet),3)]
bed <- propertyDet[seq(1,length(propertyDet),4)]
bed <- propertyDet[seq(1,length(propertyDet),6)]
bed <- propertyDet[seq(1,length(propertyDet),5)]
bath <- propertyDet[seq(2,length(propertyDet),5)]
sqft <- propertyDet[seq(3,length(propertyDet),5)]
property_df <- cbind(street,city,state,zip,price,bed,bath,sqft)
View(property_df)
real_estate <- function(url) {
r = GET(url)
doc <- htmlTreeParse(r, useInternal=TRUE)
propertyDet <- xpathSApply(doc, "//span[@class='propertyInfo']/dd",xmlValue)
# Replace all \n by spaces
street <- xpathSApply(doc, "//span[@itemprop='streetAddress']",xmlValue)
city <- xpathSApply(doc, "//span[@itemprop='addressLocality']",xmlValue)
state <- xpathSApply(doc, "//span[@itemprop='addressRegion']",xmlValue)
zip <- xpathSApply(doc, "//span[@itemprop='postalCode']",xmlValue)
price <- xpathSApply(doc, "//span[@class='propertyInfo']/dd[@class='price']",xmlValue)
bed <- propertyDet[seq(1,length(propertyDet),5)]
bath <- propertyDet[seq(2,length(propertyDet),5)]
sqft <- propertyDet[seq(3,length(propertyDet),5)]
property_df <- cbind(street,city,state,zip,price,bed,bath,sqft)
property_df
}
page1 <- 'https://www.realtytrac.com/mapsearch/real-estate/tx/bexar-county/?sortbyfield=proximity,asc&itemsper=50'
p1 <- real_estate(page1)
head(p1)
class(p1)
property_df <- data.frame(cbind(street,city,state,zip,price,bed,bath,sqft))
p1 <- real_estate(page1)
head(p1)
real_estate <- function(url) {
r = GET(url)
doc <- htmlTreeParse(r, useInternal=TRUE)
propertyDet <- xpathSApply(doc, "//span[@class='propertyInfo']/dd",xmlValue)
# Replace all \n by spaces
street <- xpathSApply(doc, "//span[@itemprop='streetAddress']",xmlValue)
city <- xpathSApply(doc, "//span[@itemprop='addressLocality']",xmlValue)
state <- xpathSApply(doc, "//span[@itemprop='addressRegion']",xmlValue)
zip <- xpathSApply(doc, "//span[@itemprop='postalCode']",xmlValue)
price <- xpathSApply(doc, "//span[@class='propertyInfo']/dd[@class='price']",xmlValue)
bed <- propertyDet[seq(1,length(propertyDet),5)]
bath <- propertyDet[seq(2,length(propertyDet),5)]
sqft <- propertyDet[seq(3,length(propertyDet),5)]
property_df <- data.frame(cbind(street,city,state,zip,price,bed,bath,sqft))
property_df
}
p1 <- real_estate(page1)
head(p1)
str1 <- 'https://www.realtytrac.com/mapsearch/real-estate/tx/bexar-county/p-'
str2 <- '/?sortbyfield=proximity,asc&itemsper=50'
for(i in 1:5) {
this.url <- str1 + i + str2
}
this.url <- c(str1,i,str2)
this.url
str1 <- 'https://www.realtytrac.com/mapsearch/real-estate/tx/bexar-county/p-'
str2 <- '/?sortbyfield=proximity,asc&itemsper=50'
for(i in 1:5) {
this.url <- paste(str1,i,str2)
}
this.url
str1 <- 'https://www.realtytrac.com/mapsearch/real-estate/tx/bexar-county/p-'
str2 <- '/?sortbyfield=proximity,asc&itemsper=50'
for(i in 1:5) {
this.url <- paste(str1,i,str2,"")
}
this.url
str1 <- 'https://www.realtytrac.com/mapsearch/real-estate/tx/bexar-county/p-'
str2 <- '/?sortbyfield=proximity,asc&itemsper=50'
for(i in 1:5) {
this.url <- paste(str1,i,str2,sep="")
}
this.url
str1 <- 'https://www.realtytrac.com/mapsearch/real-estate/tx/bexar-county/p-'
str2 <- '/?sortbyfield=proximity,asc&itemsper=50'
for(i in 1:5) {
this.url <- paste(str1,i,str2,sep="")
this.df <- c(this.df, real_estate(this.url))
}
this.df <- data.frame()
colnames(this.df) <- c('street','state','state','zip','price','bed','bath','sqft')
this.df <- data.frame()
colnames(this.df) <- c('street','state','state','zip','price','bed','bath','sqft')
names(this.df) <- c('street','state','state','zip','price','bed','bath','sqft')
col.names(this.df) <- c('street','state','state','zip','price','bed','bath','sqft')
this.df <- data.frame(matrix(ncol = 8, nrow = 0))
colnames(this.df) <- c('street','state','state','zip','price','bed','bath','sqft')
View(this.df)
for(i in 1:5) {
this.url <- paste(str1,i,str2,sep="")
this.df <- c(this.df, real_estate(this.url))
}
View(z)
final <- data.frame(matrix(ncol = 8, nrow = 0))
colnames(this.df) <- c('street','state','state','zip','price','bed','bath','sqft')
colnames(final)<- c('street','state','state','zip','price','bed','bath','sqft')
for(i in 1:5) {
this.url <- paste(str1,i,str2,sep="")
temp.df <- real_estate(this.url)
final <- rbind(final,temp.df)
}
View(final)
View(final)
