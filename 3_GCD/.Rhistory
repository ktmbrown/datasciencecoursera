catAndNums$Links <- vector(mode = "list",length=nrow(catAndNums))
View(catAndNums)
vect_urls = character()
for(j in 1:nrow(catAndNums)) {
this_category <- catAndNums[i,2]
vect_urls[1] <- paste('http://books.toscrape.com/catalogue/category/books/',this_category,'/index.html',sep="")
for(i in 2:6) {
this_url <- paste('http://books.toscrape.com/catalogue/category/books/',this_category,'/page-',i,'.html',sep="")
if(check_link(this_url)) {
vect_urls <- c(vect_urls,this_url)
}
}
catAndNums$Links[[j]] <- vect_urls
}
View(catAndNums)
vect_urls <- character()
for(j in 1:nrow(catAndNums)) {
this_category <- catAndNums[i,2]
vect_urls[1] <- paste('http://books.toscrape.com/catalogue/category/books/',this_category,'/index.html',sep="")
for(i in 2:6) {
this_url <- paste('http://books.toscrape.com/catalogue/category/books/',this_category,'/page-',i,'.html',sep="")
if(check_link(this_url)) {
vect_urls <- c(vect_urls,this_url)
}
}
catAndNums$Links[[j]] <- vect_urls
vect_urls <- character()
}
catAndNums$Links[1]
catAndNums$Links[2]
catAndNums$Links[3]
generating_links <- function(category) {
vect <- character()
vect[1] <- paste('http://books.toscrape.com/catalogue/category/books/',this_category,'/index.html',sep="")
for(i in 2:6) {
this_url <- paste('http://books.toscrape.com/catalogue/category/books/',category,'/page-',i,'.html',sep="")
if(check_link(this_url)) {
vect <- c(vect,this_url)
}
}
vect
}
test_vect_url <- generating_links('travel_2')
test_vect_url
generating_links <- function(category) {
vect <- character()
vect[1] <- paste('http://books.toscrape.com/catalogue/category/books/',category,'/index.html',sep="")
for(i in 2:6) {
this_url <- paste('http://books.toscrape.com/catalogue/category/books/',category,'/page-',i,'.html',sep="")
if(check_link(this_url)) {
vect <- c(vect,this_url)
}
}
vect
}
test_vect_url <- generating_links('mystery_3')
test_vect_url
catAndNums$Links[2] <- test_vect_url
View(catAndNums)
catAndNums$Links[2]
catAndNums$Links[2] <- list(test_vect_url)
catAndNums$Links[2]
catAndNums$Numbers[2]
for(i in 1:5) {
catAndNums$Links[i] <- list(generating_links(catAndNums$Numbers[i]))
}
catAndNums$Numbers[1]
catAndNums$Links[1]
catAndNums$Links[2]
catAndNums$Links[3]
catAndNums$Links[4]
for(i in 1:nrow(catAndNums)) {
catAndNums$Links[i] <- list(generating_links(catAndNums$Numbers[i]))
}
generating_links <- function(category) {
vect <- character()
vect[1] <- paste('http://books.toscrape.com/catalogue/category/books/',category,'/index.html',sep="")
for(i in 2:8) {
this_url <- paste('http://books.toscrape.com/catalogue/category/books/',category,'/page-',i,'.html',sep="")
if!(check_link(this_url)) {
return(vect)
} else {
vect <- c(vect,this_url)
}
}
vect
}
generating_links <- function(category) {
vect <- character()
vect[1] <- paste('http://books.toscrape.com/catalogue/category/books/',category,'/index.html',sep="")
for(i in 2:8) {
this_url <- paste('http://books.toscrape.com/catalogue/category/books/',category,'/page-',i,'.html',sep="")
if(!check_link(this_url)) {
return(vect)
} else {
vect <- c(vect,this_url)
}
}
vect
}
for(i in 1:nrow(catAndNums)) {
catAndNums$Links[i] <- list(generating_links(catAndNums$Numbers[i]))
}
catAndNums$Links[1]
catAndNums$Links[2]
head(catAndNums$Links)
catAndNums$Links[[2]]
catAndNums$Links[[2]][1]
catAndNums$Links[[2]][3]
category_df<- data.frame(Categories = as.character(categories), Numbers = as.character(cat_nums))
category_df <- data.frame(lapply(category_df, as.character), stringsAsFactors=FALSE)
category_df$Links <- vector(mode = "list",length=nrow(category_df))
for(i in 1:nrow(category_df)) {
category_df$Links[i] <- list(generating_links(category_df$Numbers[i]))
}
View(category_df)
catAndNums$Links[[1]]
catAndNums$Links[[2]]
doc <- htmlTreeParse(url,useInternal=T)
read_book <- function(url,cat) {
doc <- htmlTreeParse(url,useInternal=T)
stars <- xpathSApply(doc,"//article[@class='product_pod']/p/@class")
names(stars) <- NULL
title <- xpathSApply(doc, "//h3",xmlValue)
price <- xpathSApply(doc, "//p[@class = 'price_color']",xmlValue)
keeps <- c(".")
price <- gsub(paste0(".*?($|'|", paste(paste0("\\",keeps), collapse = "|"), "|[^[:punct:]]).*?"), "\\1", price)
price_pounds <- as.numeric(as.character(price))
price_dollars <- price_pounds*0.765102
stars <- gsub('star-rating ','',stars)
category = c(rep(cat,length(stars)))
book_df <- data.frame(Title = title, PriceDollars = price_dollars,PricePounds = price_pounds, Rating = stars, Category = category)
book_df
}
for(u in category_df$Links[[2]]) {
temp_df <- read_book(u, category_df$Categories[[2]])
}
View(temp_df)
View(temp_df)
myBook_df <- data.frame(matrix(,ncol=5,nrow=0))
names(myBook_df)<- c('Title','PriceDollars','PricePounds','Rating','Category')
myBook_df <- data.frame(matrix(,ncol=5,nrow=0))
names(myBook_df)<- c('Title','PriceDollars','PricePounds','Rating','Category')
for(u in category_df$Links[[2]]) {
temp_df <- read_book(u, category_df$Categories[[2]])
myBook_df <- rbind(myBook_df, temp_df)
}
View(myBook_df)
for(r in 1:5) {
for(u in category_df$Links[[r]]) {
temp_df <- read_book(u, category_df$Categories[[r]])
myBook_df <- rbind(myBook_df, temp_df)
}
}
View(myBook_df)
myBook_df <- data.frame(matrix(,ncol=5,nrow=0))
names(myBook_df)<- c('Title','PriceDollars','PricePounds','Rating','Category')
for(r in 1:5) {
for(u in category_df$Links[[r]]) {
temp_df <- read_book(u, category_df$Categories[[r]])
myBook_df <- rbind(myBook_df, temp_df)
}
}
myBook_df <- data.frame(matrix(,ncol=5,nrow=0))
names(myBook_df)<- c('Title','PriceDollars','PricePounds','Rating','Category')
for(r in 1:nrow(category_df)) {
for(u in category_df$Links[[r]]) {
temp_df <- read_book(u, category_df$Categories[[r]])
myBook_df <- rbind(myBook_df, temp_df)
}
}
View(myBook_df)
title <- xpathSApply(doc, "//h3/a@alt",xmlValue)
title <- xpathSApply(doc, "//h3/a/@alt")
title <- xpathSApply(doc, "//a/@alt")
# getting html document from homepage
url <- 'http://books.toscrape.com/'
doc <- htmlTreeParse(url,useInternal=T)
title <- xpathSApply(doc, "//a/@alt")
title <- xpathSApply(doc, "//a", xmlGetAttr, 'alt')
View(title)
title <- xpathSApply(doc, ".//a", xmlGetAttr, 'alt')
title <- xpathSApply(doc, "//a", xmlGetAttr, 'alt')
title[[1]]
title <- xpathSApply(doc, "//article[@class='product_pod']/a/@alt")
title <- xpathSApply(doc, "//article[@class='product_pod']/div[@class='image_contaier']/a/@alt")
title <- xpathSApply(doc, "//article[@class='product_pod']/div[@class='image_container']/a/@alt")
View(title)
title <- xpathSApply(doc, "//article[@class='product_pod']/div[@class='image_container']/a",xmlGetAttr,'alt')
View(title)
head(title)
title <- xpathSApply(doc, "//article[@class='product_pod']/div[@class='image_container']/img",xmlGetAttr,'alt')
title <- xpathSApply(doc, "//article[@class='product_pod']/div[@class='image_container']/img/@alt")
title <- xpathSApply(doc, "//article[@class='product_pod']/div[@class='image_container']/a/img/@alt")
title
names(title) <- NULL
title
read_book <- function(url,cat) {
doc <- htmlTreeParse(url,useInternal=T)
stars <- xpathSApply(doc,"//article[@class='product_pod']/p/@class")
names(stars) <- NULL
title <- xpathSApply(doc, "//article[@class='product_pod']/div[@class='image_container']/a/img/@alt")
names(title) <- NULL
price <- xpathSApply(doc, "//p[@class = 'price_color']",xmlValue)
keeps <- c(".")
price <- gsub(paste0(".*?($|'|", paste(paste0("\\",keeps), collapse = "|"), "|[^[:punct:]]).*?"), "\\1", price)
price_pounds <- as.numeric(as.character(price))
price_dollars <- price_pounds*0.765102
stars <- gsub('star-rating ','',stars)
category = c(rep(cat,length(stars)))
book_df <- data.frame(Title = title, PriceDollars = price_dollars,PricePounds = price_pounds, Rating = stars, Category = category)
book_df
}
myBook_df <- data.frame(matrix(,ncol=5,nrow=0))
names(myBook_df)<- c('Title','PriceDollars','PricePounds','Rating','Category')
# populating the myBook dataframe by iterating through each row in the category
# dataframe and each link in the Links column (column of lists of links)
for(r in 1:nrow(category_df)) {
for(u in category_df$Links[[r]]) {
temp_df <- read_book(u, category_df$Categories[[r]])
myBook_df <- rbind(myBook_df, temp_df)
}
}
View(myBook_df)
read_book <- function(url,cat) {
doc <- htmlTreeParse(url,useInternal=T)
stars <- xpathSApply(doc,"//article[@class='product_pod']/p/@class")
names(stars) <- NULL
title <- xpathSApply(doc, "//article[@class='product_pod']/div[@class='image_container']/a/img/@alt")
names(title) <- NULL
price <- xpathSApply(doc, "//p[@class = 'price_color']",xmlValue)
keeps <- c(".")
price <- gsub(paste0(".*?($|'|", paste(paste0("\\",keeps), collapse = "|"), "|[^[:punct:]]).*?"), "\\1", price)
price_pounds <- as.numeric(as.character(price))
price_dollars <- round(price_pounds*0.765102, digits = 2)
stars <- gsub('star-rating ','',stars)
category = c(rep(cat,length(stars)))
book_df <- data.frame(Title = title, PriceDollars = price_dollars,PricePounds = price_pounds, Rating = stars, Category = category)
book_df
}
# of 0.765102*BPD = USD (see read_book function below)
myBook_df <- data.frame(matrix(,ncol=5,nrow=0))
names(myBook_df)<- c('Title','PriceDollars','PricePounds','Rating','Category')
# populating the myBook dataframe by iterating through each row in the category
# dataframe and each link in the Links column (column of lists of links)
for(r in 1:nrow(category_df)) {
for(u in category_df$Links[[r]]) {
temp_df <- read_book(u, category_df$Categories[[r]])
myBook_df <- rbind(myBook_df, temp_df)
}
}
View(myBook_df)
View(myBook_df)
# Creating factor variable
myBook_df <- cbind(myBook_df[,1:4],factor(myBook_df$Rating),myBook_df$Category)
View(myBook_df)
class(myBook_df$`factor(myBook_df$Rating)`)
# Creating factor variable
Rating.f <- factor(myBook_df$Rating)
myBook_df <- cbind(myBook_df[,1:4],Rating.f,myBook_df$Category)
Rating.f
myBook_df <- cbind(myBook_df[,1:4],Rating.f,myBook_df$Category)
# creating a book dataframe that will hold all the scraped data
# and a column that calculates the USD from the GBP using the exchange rate
# of 0.765102*GBP = USD (see read_book function below)
myBook_df <- data.frame(matrix(,ncol=5,nrow=0))
for(r in 1:nrow(category_df)) {
for(u in category_df$Links[[r]]) {
temp_df <- read_book(u, category_df$Categories[[r]])
myBook_df <- rbind(myBook_df, temp_df)
}
}
# Creating factor variable
Rating.f <- factor(myBook_df$Rating)
final_myBook_df <- cbind(myBook_df[,1:4],Rating.f,myBook_df$Category)
View(final_myBook_df)
head(final_myBook_df)
hsb2 <- read.csv("https://stats.idre.ucla.edu/stat/data/hsb2.csv")
View(hsb2)
unclass(final_myBook_df$Rating.f)
is.factory(final_myBook_df$Rating.f)
is.factory(final_myBook_df$Rating.f)
is.factor(final_myBook_df$Rating.f)
summary(lm(write ~ final_myBook_df$Rating.f, data = final_myBook_df))
summary(lm(write ~ Rating.f, data = final_myBook_df))
hsb2 <- read.csv("https://stats.idre.ucla.edu/stat/data/hsb2.csv")
class(hsb2)
hsb2$race.f <- factor(hsb2$race)
summary(lm(write ~ race.f, data = hsb2))
View(final_myBook_df)
regress_df <- final_myBook_df[,c(3,5)]
head(regress_df)
summary(lm(write ~ Rating.f, data = regress_df))
summary(lm(write ~ Rating.f, data = as.matrix(regress_df))
summary(lm(write ~ Rating.f, data = as.matrix(regress_df))
)
summary(lm(write ~ Rating.f, data = as.matrix(regress_df)))
summary(lm(write ~ Rating.f, data = regress_df))
summary(lm(write ~ as.matrix(Rating.f), data = regress_df)))
summary(lm(write ~ as.matrix(Rating.f), data = regress_df))
reg=lm(x~Rating.f,data=regress_df)
reg=lm(PricePounds~Rating.f,data=regress_df)
summary(reg)
reg=lm(PricePounds~PriceDollars,data=regress_df)
regress_df <- final_myBook_df[,c(3:5)]
reg=lm(PricePounds~PriceDollars,data=regress_df)
regress_df <- final_myBook_df[,c(2,3,5)]
reg=lm(PricePounds~PriceDollars,data=regress_df)
summary(reg)
getwd()
url <- 'https://www.remax.com/realestatehomesforsale/sanantonio-tx-p001.html?query=listingtypeid-100'
get_last_page <- function(html) {
pages_data <- html %>%
# The '.' indicates the class
html_nodes('js-pager-item pages-link ') %>%
# Extract the raw text as a list
html_text()
# The second to last of the buttons is the one
pages_data[(length(pages_data)-1)] %>%
# Take the raw string
unname() %>%
# Convert to number
as.numeric()
}
first_page <- read_html(url)
# General-purpose data wrangling
library(tidyverse)
# Parsing of HTML/XML files
library(rvest)
# String manipulation
library(stringr)
# Verbose regular expressions
library(rebus)
# Eases DateTime manipulation
library(lubridate)
first_page <- read_html(url)
View(first_page)
first_page[1]
first_page[[1]]
View(first_page)
(latest_page_number <- get_last_page(first_page))
first_page <- read_html(url)
latest_page_number <- get_last_page(first_page)
get_last_page <- function(html) {
pages_data <- html %>%
# The '.' indicates the class
html_nodes('js-pager-item') %>%
# Extract the raw text as a list
html_text()
# The second to last of the buttons is the one
pages_data[(length(pages_data)-1)] %>%
# Take the raw string
unname() %>%
# Convert to number
as.numeric()
}
first_page <- read_html(url)
latest_page_number <- get_last_page(first_page)
pages_data <- html %>%
# The '.' indicates the class
html_nodes('page-link') %>%
# Extract the raw text as a list
html_text()
get_last_page <- function(html) {
pages_data <- html %>%
# The '.' indicates the class
html_nodes('page-link') %>%
# Extract the raw text as a list
html_text()
# The second to last of the buttons is the one
pages_data[(length(pages_data)-1)] %>%
# Take the raw string
unname() %>%
# Convert to number
as.numeric()
}
url <- 'https://www.remax.com/realestatehomesforsale/sanantonio-tx-p001.html?query=listingtypeid-100'
first_page <- read_html(url)
latest_page_number <- get_last_page(first_page)
get_last_page <- function(html) {
pages_data <- html %>%
# The '.' indicates the class
html_nodes('pages-item') %>%
# Extract the raw text as a list
html_text()
# The second to last of the buttons is the one
pages_data[(length(pages_data)-1)] %>%
# Take the raw string
unname() %>%
# Convert to number
as.numeric()
}
url <- 'https://www.remax.com/realestatehomesforsale/sanantonio-tx-p001.html?query=listingtypeid-100'
first_page <- read_html(url)
latest_page_number <- get_last_page(first_page)
get_last_page <- function(html) {
pages_data <- html %>%
# The '.' indicates the class
html_nodes('.pages-item') %>%
# Extract the raw text as a list
html_text()
# The second to last of the buttons is the one
pages_data[(length(pages_data)-1)] %>%
# Take the raw string
unname() %>%
# Convert to number
as.numeric()
}
url <- 'https://www.remax.com/realestatehomesforsale/sanantonio-tx-p001.html?query=listingtypeid-100'
first_page <- read_html(url)
latest_page_number <- get_last_page(first_page)
View(first_page)
get_last_page <- function(html) {
pages_data <- html %>%
# The '.' indicates the class
html_nodes('.pages-item') %>%
# Extract the raw text as a list
html_text()
# The second to last of the buttons is the one
pages_data[length(pages_data)] %>%
# Take the raw string
unname() %>%
# Convert to number
as.numeric()
}
url <- 'https://www.remax.com/realestatehomesforsale/sanantonio-tx-p001.html?query=listingtypeid-100'
first_page <- read_html(url)
latest_page_number <- get_last_page(first_page)
get_last_page <- function(html) {
pages_data <- html %>%
# The '.' indicates the class
html_nodes('.pages-item') %>%
# Extract the raw text as a list
html_text()
# The second to last of the buttons is the one
pages_data[length(pages_data)] %>%
# Take the raw string
unname() %>%
# Convert to number
as.numeric()
}
url <- 'https://www.remax.com/realestatehomesforsale/sanantonio-tx-p001.html'
first_page <- read_html(url)
latest_page_number <- get_last_page(first_page)
list_of_pages <- str_c(url, '?page=', 1:latest_page_number)
# General-purpose data wrangling
library(tidyverse)
# Parsing of HTML/XML files
library(rvest)
# String manipulation
library(stringr)
# Verbose regular expressions
library(rebus)
# Eases DateTime manipulation
library(lubridate)
get_last_page <- function(html) {
pages_data <- html %>%
# The '.' indicates the class
html_nodes('.pages-item') %>%
# Extract the raw text as a list
html_text()
# The second to last of the buttons is the one
pages_data[length(pages_data)] %>%
# Take the raw string
unname() %>%
# Convert to number
as.numeric()
}
url <- 'https://www.remax.com/realestatehomesforsale/sanantonio-tx-p001.htm#search/forcelatlong-false/location-San%20Antonio%2C%20TX/sv-true/sortorder-pricehigh/pagenumber-1/tab-forsale/pagesize-24/Count-24/'
first_page <- read_html(url)
latest_page_number <- get_last_page(first_page)
list_of_pages <- str_c(url, '?page=', 1:latest_page_number)
# General-purpose data wrangling
library(tidyverse)
# Parsing of HTML/XML files
library(rvest)
# String manipulation
library(stringr)
# Verbose regular expressions
library(rebus)
# Eases DateTime manipulation
library(lubridate)
get_last_page <- function(html) {
pages_data <- html %>%
# The '.' indicates the class
html_nodes('.pages-item') %>%
# Extract the raw text as a list
html_text()
# The second to last of the buttons is the one
pages_data[length(pages_data)] %>%
# Take the raw string
unname() %>%
# Convert to number
as.numeric()
}
url <- 'https://www.remax.com/realestatehomesforsale/sanantonio-tx-p001.html'
first_page <- read_html(url)
latest_page_number <- get_last_page(first_page)
list_of_pages <- str_c(url, '?page=', 1:latest_page_number)
url <- sprintf("https://www.remax.com/realestatehomesforsale/sanantonio-tx-p001.html#search/forcelatlong-False/location-San%20Antonio%2C%20TX/sv-true/sortorder-newest/pagenumber-%s/tab-forsale/pagesize-24/Count-24/",1)
home <-str_c('https://www.remax.com/realestatehomesforsale/sanantonio-tx-p001.html#search/forcelatlong-False/location-San%20Antonio%2C%20TX/sv-true/sortorder-newest/pagenumber-',1,'/tab-forsale/pagesize-24/Count-24/')
home
first_page <- read_html(home)
latest_page_number <- get_last_page(first_page)
list_of_pages <- str_c(url, '?page=', 1:latest_page_number)
home <-str_c('https://www.remax.com/realestatehomesforsale/sanantonio-tx-p00',1,'.html')
home
first_page <- read_html(home)
latest_page_number <- get_last_page(first_page)
list_of_pages <- str_c('https://www.remax.com/realestatehomesforsale/sanantonio-tx-p00',1:latest_page_number,'.html')
head(list_of_pages)
install.packages("rvest")
